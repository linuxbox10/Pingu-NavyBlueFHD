# mod for MSNWeather by j00zek @ 2018
#

from Tools.LoadPixmap import LoadPixmap
from Components.Pixmap import Pixmap
from Renderer import Renderer
from enigma import ePixmap, eTimer
from Tools.Directories import fileExists, SCOPE_SKIN_IMAGE, SCOPE_CURRENT_SKIN, resolveFilename
from Components.config import config
import os

class BlackHarmonyMSNWeatherPixmap(Renderer):
    __module__ = __name__

    def __init__(self):
        Renderer.__init__(self)
        self.pixdelay = 50
        self.picsIcons = []
        self.picsIconsCount = 0
        self.slideIcon = 0
        self.lastPic = ''
        self.timer = eTimer()
        self.timer.callback.append(self.timerEvent)

    def applySkin(self, desktop, parent):
        attribs = []
        for attrib, value in self.skinAttributes:
            if attrib == 'pixdelay':
                self.pixdelay = int(value)
            elif attrib == 'count':
                self.count = int(value)
            elif attrib == 'control':
                self.control = int(value)
            else:
                attribs.append((attrib, value))

        self.skinAttributes = attribs
        return Renderer.applySkin(self, desktop, parent)

    GUI_WIDGET = ePixmap

    def changed(self, what):
        os.system('echo "`date +%H:%M:%S` changed" >> /tmp/MSNWeatherPixmap')
        if self.instance:
            self.instance.setScale(1) 
            if what[0] != self.CHANGED_CLEAR:
                self.runAnim(self.source.iconfilename)
            else:
                self.instance.hide()
                if self.picsIconsCount > 0:
                    self.timer.stop()
            
    def doSuspend(self, suspended):
        os.system('echo "`date +%H:%M:%S` doSuspend" >> /tmp/MSNWeatherPixmap')
        if suspended:
            self.changed((self.CHANGED_CLEAR,))
        else:
            self.changed((self.CHANGED_DEFAULT,))

    def runAnim(self, pngNameWithPath):
        os.system('echo "`date +%H:%M:%S` runAnim" >> /tmp/MSNWeatherPixmap')
        if pngNameWithPath == '':
            return
        pngAnimPath = pngNameWithPath.replace('.png','.anim')
        if fileExists(pngAnimPath):
            os.system('echo "if fileExists(%s):" >>/tmp/MSNWeatherPixmap' % pngAnimPath)
            self.slideIcon = 0
            self.picsIcons = []
            pngfiles = [f for f in os.listdir(pngAnimPath) if (os.path.isfile(os.path.join(pngAnimPath, f)) and f.endswith(".png"))]
            pngfiles.sort() 
            for x in pngfiles:
                self.picsIcons.append(LoadPixmap(os.path.join(pngAnimPath, x)))
            self.picsIconsCount = len(self.picsIcons)
            if self.picsIconsCount > 0: 
                self.timer.start(self.pixdelay, True)
        elif fileExists(pngNameWithPath):
            if self.lastPic != pngNameWithPath:
                os.system('echo "elif fileExists(%s):" >>/tmp/MSNWeatherPixmap' % pngNameWithPath)
                self.instance.setPixmapFromFile(pngNameWithPath)
                self.lastPic = pngNameWithPath
                self.instance.show()
        else:
            os.system('echo "self.instance.hide()" >>/tmp/MSNWeatherPixmap')
            self.instance.hide()

    def timerEvent(self):
        self.timer.stop()
        os.system('echo "`date +%H:%M:%S` timerEvent" >> /tmp/MSNWeatherPixmap')
        self.slideIcon += 1
        if self.slideIcon >= self.picsIconsCount:
                self.slideIcon = 0
        self.instance.setPixmap(self.picsIcons[self.slideIcon])
        self.timer.start(self.pixdelay, True)
